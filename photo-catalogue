#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

data = [
    ("Alice", [
        ("Keys", []),
            ("Purse", [
            ("Cellphone", [])
        ])
    ]),
    ("Bob", [
        ("Wallet", [
            ("Credit card", []),
            ("Money", [])
        ])
    ])
]

class PhotoCatalogue( QMainWindow ):

    def __init__( self ):
        super().__init__()

        # define class variables we will be assigning
        self._menuBar = None
        self._toolBar = None
        self._uiActions = {}

    def initUI( self ):        
        # Initialise the main window
        self.setGeometry( 200, 200, 640, 480 )
        self.setWindowTitle( "Photo Catalogue" )
        self.setWindowIcon( QIcon( "resources/Photos-icon.png" ) )
        
        # initialise all our UI actions
        self._initUIActions()

        # Initialise the main window menu
        self._initUIMenu()

        # Initialise the tool bar
        self._initUIToolBar()

        # Inialise the main central view
        self.treeView = QTreeView()
        self.treeView.setContextMenuPolicy( Qt.CustomContextMenu )
        self.treeView.customContextMenuRequested.connect( self.openMenu )

        self.dirModel = QFileSystemModel()
        self.dirModel.setFilter( QDir.AllDirs | QDir.NoDotAndDotDot )
        self.dirModel.setRootPath(self.dirModel.myComputer())
#        self.treeView.clicked.connect(self.sourceTreeViewClicked)
        self.treeView.setModel(self.dirModel)

#        self.treeView.scrollTo( self.dirModel.index() )
        
#        QFileSystemWatcher

#        self.model = QStandardItemModel()
#        self.addItems( self.model, data )
#        self.treeView.setModel( self.model )
#        self.model.setHorizontalHeaderLabels( [ self.tr( "Object" ) ] )

        okButton = QPushButton( "Ok" )
        cancelButton = QPushButton( "Cancel" )
        hbox = QHBoxLayout()
        hbox.addWidget( self.treeView )
        hbox.addStretch( 1 )
        hbox.addWidget( okButton )
        hbox.addWidget( cancelButton )
        centralWidget = QWidget()
        centralWidget.setLayout( hbox )
        self.setCentralWidget( centralWidget )

        # Initialise the main window status bar
        self.statusBar()

        # Show the main window
        self.show()


    def _initUIActions( self ):
        # Exit action for quitting the application
        action = QAction( QIcon( "resources/help-browser.png" ), "&Exit", self )                
        action.setShortcut( "Ctrl+Q" )
        action.setStatusTip( "Exit application" )
        action.triggered.connect( qApp.quit )
        self._uiActions[ "exit_action" ] = action


    def _initUIMenu( self ):
        self._menuBar = self.menuBar()
        menuItem = self._menuBar.addMenu( "&File" )
        menuItem.addAction( self._uiActions[ "exit_action" ] )


    def _initUIToolBar( self ):
        self._toolBar = self.addToolBar( "Exit" )
        self._toolBar.addAction( self._uiActions[ "exit_action" ] )


    def addItems(self, parent, elements):
        for text, children in elements:
            item = QStandardItem(text)
            parent.appendRow(item)
            if children:
                self.addItems(item, children)


    def openMenu(self, position):    
        indexes = self.treeView.selectedIndexes()
        if len(indexes) > 0:
        
            level = 0
            index = indexes[0]
            while index.parent().isValid():
                index = index.parent()
                level += 1
        
        menu = QMenu()
        if level == 0:
            menu.addAction(self.tr("Edit person"))
        elif level == 1:
            menu.addAction(self.tr("Edit object/container"))
        elif level == 2:
            menu.addAction(self.tr("Edit object"))
        
        menu.exec_(self.treeView.viewport().mapToGlobal(position))


if __name__ == '__main__':
    
    pcApp = QApplication( sys.argv )
    pc = PhotoCatalogue()
    pc.initUI()
    sys.exit( pcApp.exec_() )

